<!DOCTYPE html>
<html lang="en" style="background-color: #FFB931">
  <head>
    <title><%= htmlWebpackPlugin.options.title %></title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="format-detection" content="telephone=no">
    <script src="node_modules/webview-tile-header/WebViewTileHeader.js"></script>
    <script>
    window.ModuwareAPIIsReady = false;
    document.addEventListener('NexpaqAPIReady', function() { window.ModuwareAPIIsReady = true; });
    </script>
    <!-- <script src="https://unpkg.com/vue-i18n/dist/vue-i18n.js"></script> -->
    <script>
      // Create VueI18n instance with options
      // const i18n = new VueI18n({
      //   locale: 'zh', // set locale
      //   messages, // set locale messages
      // })

    </script>
  </head>
  <body>
    <div id="wrapper" class="wrapper" style="opacity: 0;">
      
      <morph-location :hash="currentPage" @hash-changed="currentPage = $event.target.hash" :last-navigation-direction="navigationDirection" @last-navigation-direction-changed="navigationDirection = $event.target.lastNavigationDirection"></morph-location>
      <morph-pages class="tile-pages" :selected="currentPage" @selected-changed="currentPage = $event.target.selected" :page-change-animation-direction="navigationDirection" attr-for-selected="name" no-swipeback no-animation>
        <div name="instruction" class="tile-pages__page instruction-screen">
          <div class="swiper-container">
            <div class="swiper-wrapper">
              <div class="swiper-slide">
                <div class="slide-image-container">
                  <img :src="icons.instructionAmbientIconSrc" />
                </div>
                <p class="slide-note">
                  {{ $t("main.instruction")}}
                </p>
              </div>
              <div class="swiper-slide">
                <p class="slide-note slide-note__heading">
                  {{ $t("main.warning")}}
                </p>
                <div class="slide-image-container">
                  <img :src="icons.instructionObjectIconSrc" />
                </div>
                <p class="slide-note">
                  {{ $t("main.measuring")}}
                </p>
              </div>
            </div>
            <div class="swiper-pagination"></div>
          </div>
          <div class="button-container">
            <a v-if="this.swiperPageValue == 'one'" class="action-button action-button--primary" @click="nextInstructionSlide">Next</a>
            <!-- <a v-else-if="this.swiperPageValue == 'two'" class="action-button action-button--primary" href="#main">Got it!</a> -->
            <a v-else-if="this.swiperPageValue == 'two'" class="action-button action-button--primary" @click="goToMainPage">Got it!</a>
            <a class="action-button action-button--link" href="#main" @click="disableInstruction">Don't Show Again</a>
          </div>
        </div> <!-- / page instruction -->

        <div name="snapshot" class="tile-pages__page snapshot-screen">
          <div class="snapshot-item" id="snapshot-item">
            <input type="text" v-model="snapshotValues.textInput" id="snapshot-title" class="snapshot-item__title" placeholder="Add label"
              onfocus="this.placeholder=''" onblur="this.placeholder='Add Label'">
        
            <div class="snapshot-item__daytime" id="snapshotDayAndTime">{{ snapshotTimeOutput }}</div>
        
            <table class="snapshot-item__values">
              <tr class="snapshot-item__line">
                <td class="snapshot-item__field-title" id="snapshot-temperature-title">
                  <span v-if="snapshotValues.measureType == 'ambient'">Temperature</span>
                  <span v-if="snapshotValues.measureType == 'object'">Temperature</span>
                </td>
                <td class="snapshot-item__field-value snapshot-item__field-value--temperature">{{ snapshotTemperatureOutput }}</td>
              </tr>
              <tr class="snapshot-item__line">
                <td class="snapshot-item__field-title">Humidity</td>
                <td class="snapshot-item__field-value snapshot-item__field-value--humidity">{{ snapshotHumidityOutput }}</td>
              </tr>
            </table>
            <!-- <div class="snapshot-item__location" id="snapshotDayAndTime">One Kowloon, 1 Wang Yuen Street, Kowloon Bay, Hong Kong</div> -->
          </div>
          <div class="button-container" id="snapshot-buttons-container">
            <button class="action-button" id="snapshot-button-cancel">Cancel</button>
            <a class="action-button action-button--primary" id="history-snapshot" href="#main" @click="saveTemperatureHistory()">Save</a>
          </div>
        </div>
        <!-- / page snapshot -->
        
        <div name="main" class="tile-pages__page tile-pages__page--main">
          <template>
            <morph-tabbar class="navigation-tabs" :selected="currentTab" @selected-changed="currentTab = $event.target.selected">
              <morph-tabbar-item name="result" :not-selected-image="tabbarIcons[platform].tabbarResultNotSelected" :selected-image="tabbarIcons[platform].tabbarResultSelected"></morph-tabbar-item>
              <morph-tabbar-item name="history" :not-selected-image="tabbarIcons[platform].tabbarHistoryNotSelected" :selected-image="tabbarIcons[platform].tabbarHistorySelected"></morph-tabbar-item>
              <morph-tabbar-item name="settings" :not-selected-image="tabbarIcons[platform].tabbarSettingsNotSelected" :selected-image="tabbarIcons[platform].tabbarSettingsSelected"></morph-tabbar-item>
            </morph-tabbar>
          </template>
          <morph-pages class="tile-tabs" :selected="currentTab" @selected-changed="currentTab = $event.target.selected" :page-change-animation-direction="navigationDirection" attr-for-selected="name"
          fallback-selection="result" no-swipeback no-animation> 
            <div name="result" class="tile-pages__page result-screen">
              <div class="result-screen__content">
                <div class="result-screen__left-side">
                  <div class="temperature-scale">
                    <div class="temperature-scale__scale" :class="scaleUnitClass" :style="scaleValue"></div>
                  </div>
                </div>
                <div class="result-screen__right-side">
                  <div class="temperature-numbers">
                    <!-- <div class="temperature-numbers__temparature-value" id="temperature-value">{{ temperatureOutput }} {{ temperatureUnitSelected }}</div> -->
                    <span class="temperature-numbers__temparature-value" id="temperature-value">{{ temperatureOutput }}</span>
                    <span class="temperature-numbers__temparature-unit" id="temperature-unit">{{ temperatureUnitSelected }}</span>
                    <div class="temperature-numbers__humidity">
                      <span class="temperature-numbers__humidity-title">Humidity</span>
                      <span class="temperature-numbers__humidity-value" id="humidity-value">{{ humidityOutput }}</span>
                    </div>
                  </div>
                </div>
              </div>
            
              <a v-if="platform == 'android'" href="#snapshot" class="action-button action-button--primary" id="button-snapshot">Save</a>
            </div>
            <!-- / tab result -->

            <div name="settings" class="tile-pages__page settings-screen">
              <div class="settings-container">
                <span class="settings-container__title">General</span>
            
                <!-- <input type="checkbox" class="celsius" name="instructionSetting" v-model="settings.showInstruction" id="instructionSetting"> -->
                <label class="settings-container__label" for="instructionSetting">
                  Show instruction
                  <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="instructionSetting">
                    <input type="checkbox" id="instructionSetting" class="mdl-switch__input" v-model="settings.showInstruction">
                    <span class="mdl-switch__label"></span>
                  </label>
                </label>
              </div>
            
              <div v-if="platform == 'ios'" class="settings-container">
                <span class="settings-container__title">Measure</span>
            
                <input type="radio" name="measureType" value="ambient" v-model="settings.measureType" id="ambientSetting">
                <label class="settings-container__label" for="ambientSetting">Ambient temperature</label>
    
                <input type="radio" name="measureType" value="object" v-model="settings.measureType" id="objectSetting" >
                <label class="settings-container__label" for="objectSetting">Object temperature</label>
              </div>

              <div v-if="platform == 'android'" class="settings-container">
                <span class="settings-container__title">Measure</span>

                <label class="settings-container__label" for="ambientSetting">
                  <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="ambientSetting">
                    <input type="radio" id="ambientSetting" class="mdl-radio__button" name="measureType" value="ambient" v-model="settings.measureType">
                    <span class="mdl-radio"></span>
                  </label>
                  Ambient temperature
                </label>
            
                <label class="settings-container__label" for="objectSetting">
                  <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="objectSetting">
                    <input type="radio" id="objectSetting" class="mdl-radio__button" name="measureType" value="object" v-model="settings.measureType">
                    <span class="mdl-radio"></span>
                  </label>
                  Object temperature
                </label>
              </div>
            
              <div v-if="platform == 'ios'" class="settings-container">
                <span class="settings-container__title">Units</span>
            
                <input type="radio" class="celsius" name="measureUnit" value="celsius" v-model="settings.units" id="celsiusSetting" >
                <label class="settings-container__label unit-celsius" for="celsiusSetting">Celsius</label>
                
                <input type="radio" class="fahrenheit" name="measureUnit" value="fahrenheit" v-model="settings.units" id="fahrenheitSetting" >
                <label class="settings-container__label unit-fahrenheit" for="fahrenheitSetting">Fahrenheit</label>
              </div>

              <div v-if="platform == 'android'" class="settings-container">
                <span class="settings-container__title">Units</span>
            
                <label class="settings-container__label unit-celsius" for="celsiusSetting">
                  <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="celsiusSetting">
                    <input type="radio" id="celsiusSetting" class="mdl-radio__button celsius" name="measureUnit" value="celsius" v-model="settings.units">
                    <span class="mdl-radio"></span>
                  </label>
                  Celsius
                </label>
                
                <label class="settings-container__label unit-fahrenheit" for="fahrenheitSetting">
                  <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="fahrenheitSetting">
                    <input type="radio" id="fahrenheitSetting" class="mdl-radio__button fahrenheit" name="measureUnit" value="fahrenheit" v-model="settings.units">
                    <span class="mdl-radio"></span>
                  </label>
                  Fahrenheit
                </label>
              </div>
            
            </div>
            <!-- / tab settings -->

            <div name="history" class="tile-pages__page history-screen">
              <div class="history-placeholder" v-if="!temperatureListDataValues.length">
                <img class="history-placeholder-icon" :src="icons.historyEmptyIconSrc" />
                <div class="history-placeholder-title">No saved mesaurements yet...</div>
                <span class="history-placeholder-text">Timeline will display the history of your measurements</span>
              </div>
            
              <morph-list-view class="temperature-list" v-for="(temperatureListDataValue, index) in temperatureListDataValues" v-bind:key="temperatureListDataValue.date">
                <morph-list-view-title>{{temperatureListDataValue.date | dateFormat}}</morph-list-view-title>

                <!-- <morph-swipeout>
                
                  <span slot="left-buttons">
                    <morph-button color="red" filled big flat item-delete swipeout-prompt-text="Are you sure you want to delete this item?">Delete</morph-button>
                  </span>
                
                  Swipeout Container
                
                  <span slot="right-buttons" on-click="buttonClickHandler">
                    <morph-button color="red" filled big flat item-delete>Delete</morph-button>
                  </span>
                
                </morph-swipeout> -->
                <morph-swipeout class="temperature-list-item" v-for="item in temperatureListDataValue.items" v-bind:key="item.id">

                  <morph-list-view-item class="temperature-list-item">
                    <span class="temperature-list-item__icon-container" slot="icon">
                      <img :src="icons.temperatureListIconSrc" />
                    </span>
                    <span slot="header" class="temperature-list-item__title">{{ item.label | capitalize }}</span>
              
                    <span class="temperature-list-item__content">
                      Temperature:
                      <span class="temperature-list-item__value temperature-list-item__value--temperature">{{ item.temperatureValue | formatTemperature(settings.units) }}</span>
              
                      <br> Humidity:
                      <span class="temperature-list-item__value temperature-list-item__value--humidity">{{ item.humidityValue | formatHumidity }}</span>
                    </span>
              
                    <!-- <span slot="footer" class="temperature-list-item__address">
                              One Kowloon, 1 Wang Yuen Street, Kowloon Bay, Hong Kong
                            </span> -->
              
                    <span slot="secondary-content" class="temperature-list-item__time">
              
                      {{ item.time }}
                      <br>
                      <!-- <button class="nxp-btn-back destroy" style="border-radius: 5px; background: red; color: white; padding: 3px; opacity: 0.3;" v-on:click="removeTemperatureHistoryItem(item.id)">Delete</button> -->
                    </span>
              
                  </morph-list-view-item>

                  <span slot="right-buttons">
                    <morph-button class="swiper-integration-class" color="red" filled flat item-delete v-on:click="removeTemperatureHistoryItem(item.id)">Delete</morph-button>
                  </span>
                </morph-swipeout>


            
              </morph-list-view>
            
            </div>
            <!-- / tab history -->
          </morph-pages>
        </div> <!-- / main page -->
      </morph-pages>
    </div> <!-- / wrapper -->

    <!--
      Feature detect Custom Elements support. If the browser DOES support Custom
      Elements then we need to load the custom-elements-es5-adapter because
      our project code has been transpiled from ES2015 to ES5 and native Custom
      Elements expect elements will be registered as classes.
    -->
    <!-- <div id="ce-es5-shim">
      <script type="text/javascript">
        if (!window.customElements) {
          var ceShimContainer = document.querySelector('#ce-es5-shim');
          ceShimContainer.parentElement.removeChild(ceShimContainer);
        }
      </script>
      <script type="text/javascript" src="bower_components/webcomponentsjs/custom-elements-es5-adapter.js"></script>
    </div> -->
    
    <!--
      Use the webcomponents-loader script which will feature detect which Web
      Components features are missing and lazy load the appropriate polyfills.
      When we hear the 'WebComponentsReady' event from the polyfill bundle we can
      insert our 'bundle.js'.
    -->
    <script>
      (function() {
        document.addEventListener('WebComponentsReady', function componentsReady() {
          document.removeEventListener('WebComponentsReady', componentsReady, false);
          var script = document.createElement('script');
          script.src = '<%= htmlWebpackPlugin.files.js[0] %>';
          var refScript = document.getElementsByTagName('script')[0];
          refScript.parentNode.insertBefore(script, refScript);
        }, false);
      })();
    </script>
    <script src="bower_components/webcomponentsjs/webcomponents-loader.js"></script>

    <!--
      IMPORTANT: Make sure you set the inject: false option in HTMLWebpackPlugin
      so it doesn't try to insert bundle.js. We're handling loading it ourselves
      up above.
    -->

  </body>
</html>
